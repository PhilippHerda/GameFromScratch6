#BlueJ class context
comment0.target=Leinwand
comment0.text=\n\ Leinwand\ ist\ eine\ Klasse,\ die\ einfache\ Zeichenoperationen\ auf\ einer\n\ leinwandartigen\ Zeichenfl\u00E4che\ erm\u00F6glicht.\ Sie\ ist\ eine\ vereinfachte\ Version\n\ der\ Klasse\ Canvas\ (englisch\ f\u00FCr\ Leinwand)\ des\ JDK\ und\ wurde\ speziell\ f\u00FCr\ das\n\ Projekt\ "Figuren"\ geschrieben.\n\ \n\ \n\ @author\:\ Bruce\ Quig\n\ @author\:\ Michael\ K\u00F6lling\ (mik)\n\ \n\ @version\:\ 2016.02.29\n
comment1.params=
comment1.target=Leinwand\ gibLeinwand()
comment1.text=\n\ Fabrikmethode,\ die\ eine\ Referenz\ auf\ das\ einzige\ Exemplar\ dieser\ Klasse\n\ zur\u00FCckliefert.\ Wenn\ es\ von\ einer\ Klasse\ nur\ genau\ ein\ Exemplar\ gibt,\ wird\n\ dieses\ als\ 'Singleton'\ bezeichnet.\n
comment2.params=titel\ breite\ hoehe\ grundfarbe
comment2.target=Leinwand(java.lang.String,\ int,\ int,\ java.awt.Color)
comment2.text=\n\ Erzeuge\ eine\ Leinwand.\n\ \n\ @param\ titel\n\ \ \ \ \ \ \ \ \ \ \ \ Titel,\ der\ im\ Rahmen\ der\ Leinwand\ angezeigt\ wird\n\ @param\ breite\n\ \ \ \ \ \ \ \ \ \ \ \ die\ gew\u00FCnschte\ Breite\ der\ Leinwand\n\ @param\ hoehe\n\ \ \ \ \ \ \ \ \ \ \ \ die\ gew\u00FCnschte\ H\u00F6he\ der\ Leinwand\n\ @param\ grundfarbe\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Hintergrundfarbe\ der\ Leinwand\n
comment3.params=sichtbar
comment3.target=void\ setzeSichtbarkeit(boolean)
comment3.text=\n\ Setze,\ ob\ diese\ Leinwand\ sichtbar\ sein\ soll\ oder\ nicht.\ Wenn\ die\ Leinwand\n\ sichtbar\ gemacht\ wird,\ wird\ ihr\ Fenster\ in\ den\ Vordergrund\ geholt.\ Diese\n\ Operation\ kann\ auch\ benutzt\ werden,\ um\ ein\ bereits\ sichtbares\n\ Leinwandfenster\ in\ den\ Vordergrund\ (vor\ andere\ Fenster)\ zu\ holen.\n\ \n\ @param\ sichtbar\n\ \ \ \ \ \ \ \ \ \ \ \ boolean\ f\u00FCr\ die\ gew\u00FCnschte\ Sichtbarkeit\:\ true\ f\u00FCr\ sichtbar,\n\ \ \ \ \ \ \ \ \ \ \ \ false\ f\u00FCr\ nicht\ sichtbar.\n
comment4.params=figur\ farbe\ shape
comment4.target=void\ zeichne(java.lang.Object,\ java.lang.String,\ java.awt.Shape)
comment4.text=\n\ Zeichne\ f\u00FCr\ das\ gegebene\ Figur-Objekt\ eine\ Java-Figur\ (einen\ Shape)\ auf\n\ die\ Leinwand.\n\ \n\ @param\ figur\n\ \ \ \ \ \ \ \ \ \ \ \ das\ Figur-Objekt,\ f\u00FCr\ das\ ein\ Shape\ gezeichnet\ werden\ soll\n\ @param\ farbe\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Farbe\ der\ Figur\n\ @param\ shape\n\ \ \ \ \ \ \ \ \ \ \ \ ein\ Objekt\ der\ Klasse\ Shape,\ das\ tats\u00E4chlich\ gezeichnet\ wird\n
comment5.params=figur
comment5.target=void\ entferne(java.lang.Object)
comment5.text=\n\ Entferne\ die\ gegebene\ Figur\ von\ der\ Leinwand.\n\ \n\ @param\ figur\n\ \ \ \ \ \ \ \ \ \ \ \ die\ Figur,\ deren\ Shape\ entfernt\ werden\ soll\n
comment6.params=farbname
comment6.target=void\ setzeZeichenfarbe(java.lang.String)
comment6.text=\n\ Setze\ die\ Zeichenfarbe\ der\ Leinwand.\n\ \n\ @param\ farbname\n\ \ \ \ \ \ \ \ \ \ \ \ der\ Name\ der\ neuen\ Zeichenfarbe.\n
comment7.params=millisekunden
comment7.target=void\ warte(int)
comment7.text=\n\ Warte\ f\u00FCr\ die\ angegebenen\ Millisekunden.\ Mit\ dieser\ Operation\ wird\ eine\n\ Verz\u00F6gerung\ definiert,\ die\ f\u00FCr\ animierte\ Zeichnungen\ benutzt\ werden\ kann.\n\ \n\ @param\ millisekunden\n\ \ \ \ \ \ \ \ \ \ \ \ die\ zu\ wartenden\ Millisekunden\n
comment8.params=
comment8.target=void\ erneutZeichnen()
comment8.text=\n\ Zeichne\ erneut\ alle\ Figuren\ auf\ der\ Leinwand.\n
comment9.params=
comment9.target=void\ loeschen()
comment9.text=\n\ L\u00F6sche\ die\ gesamte\ Leinwand.\n
numComments=10
